text

%addon com_redhat_kdump --disable

%end

# Keyboard layouts
keyboard --xlayouts='in (eng)'
# System language
lang en_IN.UTF-8

# Network information
network --bootproto=static --ip=get_ipv4_address --netmask=get_ipv4_netmask --gateway=get_ipv4_gateway --nameserver=8.8.8.8,8.8.4.4 --device=link --onboot=on --hostname=get_infra_server_name.get_local_infra_domain_name --activate

%packages
@^minimal-environment
bash-completion
vim
git
bind-utils
bind
wget
tar
net-tools
cifs-utils
zip
tftp-server
kea
kea-hooks
syslinux
nginx
nginx-mod-stream
tmux
tftp
rsync
sysstat
tcpdump
traceroute
nc
samba-client
lsof
nfs-utils
nmap
tuned
tree
yum-utils
cloud-utils-growpart
-kdump-utils
-lvm2
%end

# Run the Setup Agent on first boot
firstboot --enable

# File System Creation
ignoredisk --only-use=vda
clearpart --all --initlabel
bootloader --location=mbr --boot-drive=vda
part /boot/efi --label=FIRMWARE --size=128  --fstype=efi
part /boot     --label=BOOT     --size=512  --fstype=xfs
part /         --label=ROOT     --size=1024 --grow --fstype=xfs

# System timezone
timezone Asia/Kolkata --utc
timesource --ntp-pool time.google.com

# Enable service
services --enabled=tuned

# Disable SELinux
selinux --disabled

# Disable Firewall
firewall --disabled

# Root password
rootpw --iscrypted get_shadow_password_super_mgmt_user
user --groups=wheel --name=get_mgmt_super_user --password=get_shadow_password_super_mgmt_user --iscrypted --gecos="get_mgmt_super_user"

eula --agreed

# POST-INSTALLATION SCRIPT
%post --interpreter=/usr/bin/bash --log=/root/original-ks-post.log --erroronfail

/usr/bin/echo -e "HISTSIZE=-1\nHISTFILESIZE=-1" >>/root/.bashrc
/usr/bin/echo -e "HISTSIZE=-1\nHISTFILESIZE=-1" >>/home/get_mgmt_super_user/.bashrc

/usr/bin/echo "get_mgmt_super_user ALL=(ALL) NOPASSWD:ALL" >/etc/sudoers.d/get_mgmt_super_user

/bin/chmod +x /etc/rc.d/rc.local

############### Start Reconfigure-Network-with-Network-Manager ##############

mkdir -p /root/system-connections/orig-during-install

/bin/rsync -avPh /etc/NetworkManager/system-connections/* /root/system-connections/orig-during-install/

v_count=0
for v_interface_file in $(/bin/ls /etc/NetworkManager/system-connections/)
do
        /bin/mv /etc/NetworkManager/system-connections/$v_interface_file /etc/NetworkManager/system-connections/eth$v_count.nmconnection
        v_interface=$(/bin/echo $v_interface_file | /bin/cut -d "." -f 1)
        /bin/sed -i "s/$v_interface/eth$v_count/g" /etc/NetworkManager/system-connections/eth$v_count.nmconnection
        v_count=$((v_count+1))
done

/bin/mv /etc/NetworkManager/system-connections/eth* /root/system-connections

/bin/rm -rf /etc/NetworkManager/system-connections/*

/bin/rsync -avPh /root/system-connections/* /etc/NetworkManager/system-connections/.

/bin/rm -rf /etc/NetworkManager/system-connections/orig-during-install

/bin/mkdir -p /etc/systemd/network

V_count=0
for v_interface in $(/bin/ls /sys/class/net | /bin/grep -v lo)
do
        /bin/echo -e "[Match]\nMACAddress=$(/sbin/ip link | /bin/grep $v_interface -A 1 | /bin/grep link/ether | /bin/cut -d " " -f 6)\n\n[Link]\nName=eth$V_count" >/etc/systemd/network/7$V_count-eth$V_count.link
V_count=$((V_count+1))
done

############### End Reconfigure-Network-with-Network-Manager ##############

/bin/mkdir -p /home/get_mgmt_super_user/.ssh /root/.ssh

/bin/echo 'get_ssh_public_key_of_qemu_host_machine' > /home/get_mgmt_super_user/.ssh/authorized_keys

/bin/echo 'get_ssh_public_key_of_qemu_host_machine' > /root/.ssh/authorized_keys

/bin/chmod 0700 /home/get_mgmt_super_user/.ssh /root/.ssh

/bin/chmod 0600 /home/get_mgmt_super_user/.ssh/authorized_keys /root/.ssh/authorized_keys

/bin/chown -R get_mgmt_super_user:get_mgmt_super_user /home/get_mgmt_super_user/.ssh 

/bin/echo 'get_local_infra_domain_name' > /root/infra_server_on_qemu_kvm_dnsbinder_domain_provided

/usr/bin/systemctl mask dnf-makecache.timer dnf-makecache.service

# Create the bootstrap script to configure the lab infra server
/usr/bin/cat << 'EOF' > /opt/lab-infra-server-bootstrap.sh
#!/bin/bash

source $HOME/.bashrc

# Clone server server-hub repo
sudo mkdir -p /server-hub
sudo chown ${USER}:$(id -g) /server-hub
git clone https://github.com/Muthukumar-Subramaniam/server-hub.git /server-hub

# Run initial setup secript
/server-hub/build-almalinux-server/setup.sh

# Export all variables from /etc/environment
if [ -f /etc/environment ]; then
    while IFS='=' read -r key value; do
        # Ignore empty lines or lines without '='
        [[ -z "$key" || -z "$value" ]] && continue
        # Remove quotes around value
        value="${value%\"}"
        value="${value#\"}"
        export "$key=$value"
    done < /etc/environment
fi

ANSIBLE_HOME="/server-hub/build-almalinux-server/"

# Run ansible-playbook that congigures the essential services
ansible-playbook /server-hub/build-almalinux-server/build-server.yaml

# Mask this service so it never runs again automatically
sudo systemctl disable lab-infra-server-bootstrap.service
sudo systemctl mask lab-infra-server-bootstrap.service

echo "[$(date)] Lab infra server bootstrap completed, going for final reboot..."
sleep 1
sudo reboot

EOF

/usr/bin/chmod 755 /opt/lab-infra-server-bootstrap.sh
/usr/bin/chown get_mgmt_super_user:get_mgmt_super_user /opt/lab-infra-server-bootstrap.sh 

# Create the systemd unit file
/usr/bin/cat << 'EOF' > /etc/systemd/system/lab-infra-server-bootstrap.service
[Unit]
Description=Lab Infra Server Bootstrap
After=multi-user.target network-online.target
Wants=multi-user.target network-online.target
DefaultDependencies=yes

[Service]
Type=oneshot
User=get_mgmt_super_user
Environment="HOME=/home/get_mgmt_super_user"
ExecStart=/opt/lab-infra-server-bootstrap.sh
StandardOutput=journal+console
StandardError=journal+console
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

# Enable the service so it runs at first boot
/usr/bin/systemctl enable lab-infra-server-bootstrap.service

%end

reboot

############## EOF #############
